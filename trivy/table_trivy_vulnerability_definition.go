package trivy

import (
	"bytes"
	"context"
	"encoding/json"

	dbTypes "github.com/aquasecurity/trivy-db/pkg/types"
	"go.etcd.io/bbolt"

	"github.com/turbot/steampipe-plugin-sdk/v3/grpc/proto"
	"github.com/turbot/steampipe-plugin-sdk/v3/plugin"
	"github.com/turbot/steampipe-plugin-sdk/v3/plugin/transform"
)

func tableTrivyVulnerabilityDefinition(ctx context.Context) *plugin.Table {
	return &plugin.Table{
		Name:        "trivy_vulnerability_definition",
		Description: "Advisories.",
		List: &plugin.ListConfig{
			Hydrate: listTrivyVulnerabilityDefinition,
			KeyColumns: []*plugin.KeyColumn{
				{Name: "name", Require: plugin.Optional},
			},
		},
		Columns: []*plugin.Column{
			// Top columns
			{Name: "name", Type: proto.ColumnType_STRING, Description: ""},
			{Name: "title", Type: proto.ColumnType_STRING, Description: ""},
			{Name: "severity", Type: proto.ColumnType_STRING, Description: ""},
			{Name: "cwe_ids", Type: proto.ColumnType_JSON, Transform: transform.FromField("CweIDs"), Description: ""},
			{Name: "vendor_severity", Type: proto.ColumnType_JSON, Description: ""},
			{Name: "cvss", Type: proto.ColumnType_JSON, Transform: transform.FromField("CVSS"), Description: ""},
			{Name: "references", Type: proto.ColumnType_JSON, Description: ""},
			{Name: "published_date", Type: proto.ColumnType_TIMESTAMP, Description: ""},
			{Name: "last_modified_date", Type: proto.ColumnType_TIMESTAMP, Description: ""},
			{Name: "description", Type: proto.ColumnType_STRING, Description: ""},
			{Name: "custom", Type: proto.ColumnType_JSON, Description: ""},
		},
	}
}

type vulnerabilityDefinitionRow struct {
	dbTypes.Vulnerability
	Name string
}

func listTrivyVulnerabilityDefinition(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {

	conn, err := connectDatabase(ctx, d)
	if err != nil {
		plugin.Logger(ctx).Error("trivy_advisory.listTrivyVulnerability", "connection_error", err)
		return nil, err
	}

	conn.View(func(tx *bbolt.Tx) error {
		b := tx.Bucket([]byte("vulnerability"))
		c := b.Cursor()

		keyQuals := d.KeyColumnQuals
		namePrefix := []byte{}
		if keyQuals["name"] != nil {
			namePrefix = []byte(keyQuals["name"].GetStringValue())
		}

		for k, v := c.Seek(namePrefix); k != nil && bytes.HasPrefix(k, namePrefix); k, v = c.Next() {
			var vd vulnerabilityDefinitionRow
			err := json.Unmarshal(v, &vd)
			if err != nil {
				plugin.Logger(ctx).Warn("trivy_advisory.listTrivyVulnerabilityDefinition", "name", string(k), "value", string(v), "data_error", err)
				continue
			}
			vd.Name = string(k)
			d.StreamListItem(ctx, vd)
		}

		return nil
	})

	return nil, nil
}
