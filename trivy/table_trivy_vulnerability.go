package trivy

import (
	"context"

	"github.com/aquasecurity/trivy/pkg/types"

	"github.com/turbot/steampipe-plugin-sdk/v3/grpc/proto"
	"github.com/turbot/steampipe-plugin-sdk/v3/plugin"
	"github.com/turbot/steampipe-plugin-sdk/v3/plugin/transform"
)

func tableTrivyVulnerability(ctx context.Context) *plugin.Table {
	return &plugin.Table{
		Name:        "trivy_vulnerability",
		Description: "Vulnerabilities in the scanned artifacts.",
		List: &plugin.ListConfig{
			ParentHydrate: listTrivyTarget,
			Hydrate:       listTrivyVulnerability,
		},
		Columns: []*plugin.Column{
			// Top columns
			{Name: "target", Type: proto.ColumnType_STRING, Description: ""},
			{Name: "class", Type: proto.ColumnType_STRING, Description: ""},
			{Name: "type", Type: proto.ColumnType_STRING, Description: ""},
			{Name: "package_name", Type: proto.ColumnType_STRING, Transform: transform.FromField("PkgName"), Description: ""},
			{Name: "vulnerability_id", Type: proto.ColumnType_STRING, Description: ""},
			{Name: "fixed_version", Type: proto.ColumnType_STRING, Description: ""},
			{Name: "installed_version", Type: proto.ColumnType_STRING, Description: ""},
			{Name: "data_source", Type: proto.ColumnType_JSON, Description: ""},
			{Name: "artifact_type", Type: proto.ColumnType_STRING, Description: ""},
			{Name: "artifact_name", Type: proto.ColumnType_STRING, Description: ""},
		},
	}
}

//// LIST FUNCTION

type vulnerabilityRow struct {
	ArtifactType string
	ArtifactName string
	Target       string
	Class        types.ResultClass
	Type         string
	types.DetectedVulnerability
}

func listTrivyVulnerability(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {

	plugin.Logger(ctx).Warn("trivy_target.listTrivyVulnerability", "stage", "begin")

	target := h.Item.(types.Report)

	plugin.Logger(ctx).Warn("trivy_target.listTrivyVulnerability", "target.ArtifactName", target.ArtifactName)
	plugin.Logger(ctx).Warn("trivy_target.listTrivyVulnerability", "target.ArtifactType", target.ArtifactType)

	for _, result := range target.Results {
		for _, v := range result.Vulnerabilities {
			vr := vulnerabilityRow{
				string(target.ArtifactType),
				target.ArtifactName,
				result.Target,
				result.Class,
				result.Type,
				v,
			}
			d.StreamListItem(ctx, vr)
		}
	}

	return nil, nil
}
