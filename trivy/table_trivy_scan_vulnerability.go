package trivy

import (
	"context"

	"github.com/aquasecurity/trivy/pkg/types"

	"github.com/turbot/steampipe-plugin-sdk/v5/grpc/proto"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin/transform"
)

func tableTrivyScanVulnerability(ctx context.Context) *plugin.Table {
	return &plugin.Table{
		Name:        "trivy_scan_vulnerability",
		Description: "Scan files and container images for vulnerabilities.",
		List: &plugin.ListConfig{
			ParentHydrate: listTrivyScanArtifactWithScan,
			Hydrate:       listTrivyScanVulnerability,
			KeyColumns: []*plugin.KeyColumn{
				{Name: "artifact_name", Require: plugin.Optional, CacheMatch: "exact"},
				{Name: "artifact_type", Require: plugin.Optional},
			},
		},
		Columns: []*plugin.Column{
			// Top columns
			{Name: "artifact_name", Type: proto.ColumnType_STRING, Description: "Name of the artifact containing the vulnerability."},
			{Name: "artifact_type", Type: proto.ColumnType_STRING, Description: "Type of artifact containing the vulnerability, e.g. container_image."},
			{Name: "target", Type: proto.ColumnType_STRING, Description: "Target within the artifact, e.g. library file or container image."},
			{Name: "class", Type: proto.ColumnType_STRING, Description: "Class of the package, e.g. lang-pkgs, os-pkgs."},
			{Name: "type", Type: proto.ColumnType_STRING, Description: "Type of the package, e.g. debian, ubuntu, yarn, npm, gomod."},
			{Name: "vulnerability_id", Type: proto.ColumnType_STRING, Description: "ID of the vulnerability."},
			{Name: "severity", Type: proto.ColumnType_STRING, Description: "Severity of the vulnerability, e.g. LOW, MEDIUM, HIGH, CRITICAL."},
			{Name: "package_name", Type: proto.ColumnType_STRING, Transform: transform.FromField("PkgName").NullIfZero(), Description: "Name of the package that has the vulnerability."},
			{Name: "installed_version", Type: proto.ColumnType_STRING, Description: "Version of the package found in the artifact."},
			{Name: "fixed_version", Type: proto.ColumnType_STRING, Description: "Version when the vulnerability is fixed."},
			{Name: "published_date", Type: proto.ColumnType_TIMESTAMP, Description: "Date when the vulnerability was published."},
			// Other columns
			{Name: "cvss", Type: proto.ColumnType_JSON, Transform: transform.FromField("CVSS"), Description: "Common Vulnerability Scoring System details for the vulnerability."},
			{Name: "cwe_ids", Type: proto.ColumnType_JSON, Transform: transform.FromField("CweIDs"), Description: "Array of Common Weakness Enumeration IDs associated with this vulnerability, e.g. [CWE-252, CWE-384]."},
			{Name: "data_source", Type: proto.ColumnType_JSON, Description: "Data source for the vulnerability definition."},
			{Name: "description", Type: proto.ColumnType_STRING, Description: "Description of the vulnerability."},
			{Name: "last_modified_date", Type: proto.ColumnType_TIMESTAMP, Description: "Date when the vulnerability was last modified."},
			{Name: "layer", Type: proto.ColumnType_JSON, Description: "Definition of the layer."},
			{Name: "package_id", Type: proto.ColumnType_STRING, Transform: transform.FromField("PkgID").NullIfZero(), Description: "Unique ID of the package, e.g. node-fetch@2.6.1."},
			{Name: "package_path", Type: proto.ColumnType_STRING, Transform: transform.FromField("PkgPath").NullIfZero(), Description: "Path for the package."},
			{Name: "primary_url", Type: proto.ColumnType_STRING, Description: "Primary URL for the vulnerability definition."},
			{Name: "references", Type: proto.ColumnType_JSON, Description: "Reference URLs for the vulnerability."},
			{Name: "severity_source", Type: proto.ColumnType_STRING, Description: "Source of the severity definition."},
			{Name: "title", Type: proto.ColumnType_STRING, Description: "Title of the vulnerability."},
			{Name: "vendor_ids", Type: proto.ColumnType_JSON, Transform: transform.FromField("VendorIDs"), Description: "Vendor IDs for this vulnerability."},
			{Name: "vendor_severity", Type: proto.ColumnType_JSON, Description: "Severity of the vulnerability as assigned by the vendor."},
		},
	}
}

type scanVulnerabilityRow struct {
	ArtifactType string
	ArtifactName string
	Target       string
	Class        types.ResultClass
	Type         string
	types.DetectedVulnerability
}

func listTrivyScanVulnerability(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {

	target := h.Item.(types.Report)

	for _, result := range target.Results {
		for _, v := range result.Vulnerabilities {
			vr := scanVulnerabilityRow{
				string(target.ArtifactType),
				target.ArtifactName,
				result.Target,
				result.Class,
				result.Type,
				v,
			}
			d.StreamListItem(ctx, vr)
		}
	}

	return nil, nil
}
